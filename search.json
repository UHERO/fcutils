[{"path":"https://uhero.github.io/fcutils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 fcutils authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://uhero.github.io/fcutils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Fuleky. Author, maintainer.","code":""},{"path":"https://uhero.github.io/fcutils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fuleky, Peter (2023). Utility Functions Time Series Forecasting, volume TBD number TBD. doi:TBD.","code":"@Manual{,   title = {Utility Functions for Time Series and Forecasting},   author = {{Fuleky} and {Peter}},   journal = {TBD},   year = {2023},   volume = {TBD},   number = {TBD},   pages = {TBD},   doi = {TBD}, }"},{"path":"https://uhero.github.io/fcutils/index.html","id":"fcutils","dir":"","previous_headings":"","what":"Utility Functions for Time Series and Forecasting","title":"Utility Functions for Time Series and Forecasting","text":"goal fcutils …","code":""},{"path":"https://uhero.github.io/fcutils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utility Functions for Time Series and Forecasting","text":"can install development version fcutils GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"UHERO/fcutils\")"},{"path":"https://uhero.github.io/fcutils/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Utility Functions for Time Series and Forecasting","text":"basic example shows solve common problem:","code":"library(fcutils) ## basic example code"},{"path":"https://uhero.github.io/fcutils/reference/AtoQ.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear interpolation based on aremos command reference page 292 — AtoQ","title":"Linear interpolation based on aremos command reference page 292 — AtoQ","text":"Linear interpolation based aremos command reference page 292","code":""},{"path":"https://uhero.github.io/fcutils/reference/AtoQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear interpolation based on aremos command reference page 292 — AtoQ","text":"","code":"AtoQ(ser_in, aggr = \"mean\")"},{"path":"https://uhero.github.io/fcutils/reference/AtoQ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear interpolation based on aremos command reference page 292 — AtoQ","text":"ser_in xts series interpolated (freq = ) aggr interpolation method: aggregate via mean (default) sum","code":""},{"path":"https://uhero.github.io/fcutils/reference/AtoQ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear interpolation based on aremos command reference page 292 — AtoQ","text":"interpolated xts series (freq = q)","code":""},{"path":"https://uhero.github.io/fcutils/reference/AtoQ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear interpolation based on aremos command reference page 292 — AtoQ","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() #> Loading required namespace: xts `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)`"},{"path":"https://uhero.github.io/fcutils/reference/QtoA.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion from quarterly to annual frequency — QtoA","title":"Conversion from quarterly to annual frequency — QtoA","text":"Conversion quarterly annual frequency","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion from quarterly to annual frequency — QtoA","text":"","code":"QtoA(ser_in, aggr = \"mean\")"},{"path":"https://uhero.github.io/fcutils/reference/QtoA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion from quarterly to annual frequency — QtoA","text":"ser_in xts series converted (freq = q) aggr aggregate via mean (default) sum","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion from quarterly to annual frequency — QtoA","text":"converted xts series (freq = )","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion from quarterly to annual frequency — QtoA","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` test2 <- QtoA(test1) # for stock type variables mean, for flow type variables sum print(test1) #>                value #> 2016-01-01 322233636 #> 2016-04-01 322829554 #> 2016-07-01 323425472 #> 2016-10-01 324021390 #> 2017-01-01 324618411 #> 2017-04-01 325213593 #> 2017-07-01 325808775 #> 2017-10-01 326403957 #> 2018-01-01 327000563 #> 2018-04-01 327594795 #> 2018-07-01 328189027 #> 2018-10-01 328783259 #> 2019-01-01 329379992 #> 2019-04-01 329972557 #> 2019-07-01 330565123 #> 2019-10-01 331157688 #> 2020-01-01 331754366 #> 2020-04-01 332344190 #> 2020-07-01 332934014 #> 2020-10-01 333523838 #> 2021-01-01 334113662 #> 2021-04-01 334703486 #> 2021-07-01 335293310 #> 2021-10-01 335883134 print(cbind(`ncen@us.sola`, test2)) #>                value   value.1 #> 2016-01-01 323127513 323127513 #> 2017-01-01 325511184 325511184 #> 2018-01-01 327891911 327891911 #> 2019-01-01 330268840 330268840 #> 2020-01-01 332639102 332639102 #> 2021-01-01 334998398 334998398"},{"path":"https://uhero.github.io/fcutils/reference/QtoM.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate a tibble of series from quaterly to monthly freq — QtoM","title":"Interpolate a tibble of series from quaterly to monthly freq — QtoM","text":"Interpolate tibble series quaterly monthly freq","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate a tibble of series from quaterly to monthly freq — QtoM","text":"","code":"QtoM(data_q, conv_type)"},{"path":"https://uhero.github.io/fcutils/reference/QtoM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate a tibble of series from quaterly to monthly freq — QtoM","text":"data_q tibble containing variables quarterly freq first column data_q named \"time\" contains dates conv_type match quarterly value via \"first\", \"last\", \"sum\", \"average\"","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate a tibble of series from quaterly to monthly freq — QtoM","text":"tibble containing variables monthly freq","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate a tibble of series from quaterly to monthly freq — QtoM","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` QtoM(tsbox::ts_tbl(test1), \"average\") #> # A tibble: 72 × 2 #>    time            value #>    <date>          <dbl> #>  1 2016-01-01 322125863. #>  2 2016-02-01 322206693. #>  3 2016-03-01 322368353. #>  4 2016-04-01 322610843. #>  5 2016-05-01 322835499. #>  6 2016-06-01 323042321. #>  7 2016-07-01 323231308. #>  8 2016-08-01 323424178. #>  9 2016-09-01 323620930. #> 10 2016-10-01 323821564. #> # ℹ 62 more rows tsbox::ts_frequency(QtoM(tsbox::ts_tbl(test1), \"average\") |> tsbox::ts_xts()) #>                value #> 2016-01-01 323127513 #> 2017-01-01 325511184 #> 2018-01-01 327891911 #> 2019-01-01 330268840 #> 2020-01-01 332639102 #> 2021-01-01 334998398"},{"path":"https://uhero.github.io/fcutils/reference/QtoM_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate a single series from quarterly to monthly freq — QtoM_1","title":"Interpolate a single series from quarterly to monthly freq — QtoM_1","text":"Interpolate single series quarterly monthly freq","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoM_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate a single series from quarterly to monthly freq — QtoM_1","text":"","code":"QtoM_1(var_q, ts_start, conv_type)"},{"path":"https://uhero.github.io/fcutils/reference/QtoM_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate a single series from quarterly to monthly freq — QtoM_1","text":"var_q vector containing single variable quarterly freq ts_start starting period c(year, quarter) e.g. c(2001, 1) conv_type match quarterly value via \"first\", \"last\", \"sum\", \"average\"","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoM_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate a single series from quarterly to monthly freq — QtoM_1","text":"vector containing single variable monthly freq","code":""},{"path":"https://uhero.github.io/fcutils/reference/QtoM_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate a single series from quarterly to monthly freq — QtoM_1","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` QtoM_1(test1, c(2010, 1), \"average\") #>            Jan       Feb       Mar       Apr       May       Jun       Jul #> 2010 322125863 322206693 322368353 322610843 322835499 323042321 323231308 #> 2011 324419829 324618469 324816936 325015228 325213575 325411976 325610431 #> 2012 326801964 327000721 327199003 327396811 327594751 327792823 327991028 #> 2013 329181554 329380269 329578152 329775202 329972481 330169989 330367727 #> 2014 331556235 331754816 331952046 332147925 332344094 332540551 332737299 #> 2015 333916369 334113376 334311240 334509963 334704786 334895709 335082734 #>            Aug       Sep       Oct       Nov       Dec #> 2010 323424178 323620930 323821564 324021592 324221013 #> 2011 325808803 326007091 326205295 326403842 326602732 #> 2012 328189079 328386974 328584715 328783058 328982005 #> 2013 330565208 330762433 330959402 331157359 331356303 #> 2014 332934022 333130721 333327397 333523897 333720221 #> 2015 335287422 335509775 335749791 335909803 335989808"},{"path":"https://uhero.github.io/fcutils/reference/bnk_end.html","id":null,"dir":"Reference","previous_headings":"","what":"end of data range in the data bank — bnk_end","title":"end of data range in the data bank — bnk_end","text":"end data range data bank","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_end.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"end of data range in the data bank — bnk_end","text":"","code":"bnk_end"},{"path":"https://uhero.github.io/fcutils/reference/bnk_end.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"end of data range in the data bank — bnk_end","text":"scalar yyyy-mm-dd date","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_end.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"end of data range in the data bank — bnk_end","text":"author","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_end.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"end of data range in the data bank — bnk_end","text":"uhero.hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_end.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"end of data range in the data bank — bnk_end","text":"Peter Fuleky fuleky@hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_start.html","id":null,"dir":"Reference","previous_headings":"","what":"define project-wide constants — bnk_start","title":"define project-wide constants — bnk_start","text":"start data range data bank","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"define project-wide constants — bnk_start","text":"","code":"bnk_start"},{"path":"https://uhero.github.io/fcutils/reference/bnk_start.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"define project-wide constants — bnk_start","text":"scalar yyyy-mm-dd date","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_start.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"define project-wide constants — bnk_start","text":"author","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_start.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"define project-wide constants — bnk_start","text":"uhero.hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/bnk_start.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"define project-wide constants — bnk_start","text":"Peter Fuleky fuleky@hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/extract_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse gets output and extract underlying data (GETS model development) — extract_data","title":"Parse gets output and extract underlying data (GETS model development) — extract_data","text":"Parse gets output extract underlying data (GETS model development)","code":""},{"path":"https://uhero.github.io/fcutils/reference/extract_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse gets output and extract underlying data (GETS model development) — extract_data","text":"","code":"extract_data(model_in)"},{"path":"https://uhero.github.io/fcutils/reference/extract_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse gets output and extract underlying data (GETS model development) — extract_data","text":"model_in model estimated arx, isat, getsm","code":""},{"path":"https://uhero.github.io/fcutils/reference/extract_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse gets output and extract underlying data (GETS model development) — extract_data","text":"xts containing model variables","code":""},{"path":"https://uhero.github.io/fcutils/reference/extract_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse gets output and extract underlying data (GETS model development) — extract_data","text":"","code":"if (FALSE) { # save the data associated with a gets model }"},{"path":"https://uhero.github.io/fcutils/reference/fcutils-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fcutils: Utility Functions for Time Series and Forecasting — fcutils-package","title":"fcutils: Utility Functions for Time Series and Forecasting — fcutils-package","text":"Manipulate time series. Retrieve store data. Extend tsbox additional frequency conversions growth calculations. Plot time series data. Modify bimets models.","code":""},{"path":[]},{"path":"https://uhero.github.io/fcutils/reference/fcutils-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fcutils: Utility Functions for Time Series and Forecasting — fcutils-package","text":"Maintainer: Peter Fuleky fuleky@hawaii.edu (ORCID)","code":""},{"path":"https://uhero.github.io/fcutils/reference/find_end.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the date of the last observation (NAs are dropped) — find_end","title":"Find the date of the last observation (NAs are dropped) — find_end","text":"Find date last observation (NAs dropped)","code":""},{"path":"https://uhero.github.io/fcutils/reference/find_end.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the date of the last observation (NAs are dropped) — find_end","text":"","code":"find_end(ser_in)"},{"path":"https://uhero.github.io/fcutils/reference/find_end.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the date of the last observation (NAs are dropped) — find_end","text":"ser_in xts series","code":""},{"path":"https://uhero.github.io/fcutils/reference/find_end.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the date of the last observation (NAs are dropped) — find_end","text":"date associated last observation","code":""},{"path":"https://uhero.github.io/fcutils/reference/find_end.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the date of the last observation (NAs are dropped) — find_end","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2060, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2018\"] <- c(323127513, 325511184, 327891911) find_end(`ncen@us.sola`) #> [1] \"2018-01-01\""},{"path":"https://uhero.github.io/fcutils/reference/find_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the date of the first observation (NAs are dropped) — find_start","title":"Find the date of the first observation (NAs are dropped) — find_start","text":"Find date first observation (NAs dropped)","code":""},{"path":"https://uhero.github.io/fcutils/reference/find_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the date of the first observation (NAs are dropped) — find_start","text":"","code":"find_start(ser_in)"},{"path":"https://uhero.github.io/fcutils/reference/find_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the date of the first observation (NAs are dropped) — find_start","text":"ser_in xts series","code":""},{"path":"https://uhero.github.io/fcutils/reference/find_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the date of the first observation (NAs are dropped) — find_start","text":"date associated first observation","code":""},{"path":"https://uhero.github.io/fcutils/reference/find_start.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the date of the first observation (NAs are dropped) — find_start","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2017/2021\"] <- c(325511184, 327891911, 330268840, 332639102, 334998398) find_start(`ncen@us.sola`) #> [1] \"2017-01-01\""},{"path":"https://uhero.github.io/fcutils/reference/get_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a set of series from udaman using series names — get_series","title":"Download a set of series from udaman using series names — get_series","text":"Download set series udaman using series names","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a set of series from udaman using series names — get_series","text":"","code":"get_series(   ser_id_vec,   format = \"wide\",   expand = \"true\",   rename = \"compact\",   freq = NULL,   descr = FALSE )"},{"path":"https://uhero.github.io/fcutils/reference/get_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a set of series from udaman using series names — get_series","text":"ser_id_vec vector series names format \"wide\" (default) \"long\" \"xts\" expand \"true\" (default) \"raw\" (\"true\" downloads formatted data, \"raw\" downloads raw units) rename \"compact\" (default), \"full\", \"\". \"compact\": @ replaced _ frequency; \"full\": @ replaced __ . _; \"\": renaming, keep UDAMAN names freq frequency missing series names (want modify freq existing names) specify frequency, e.g. \"M\". descr TRUE add udaman series name series description parentheses","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a set of series from udaman using series names — get_series","text":"time data series combined object specified format option","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a set of series from udaman using series names — get_series","text":"","code":"if (FALSE) { get_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\")) get_series(c(\"VISNS@HI.M\", \"VISUSNS@HI.M\"), freq = \"Q\") get_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\"), format = \"xts\") get_series(c(\"VISNS@HI.M\"), format = \"xts\") get_series(c(\"VISNS@HI.M\"), format = \"xts\", descr = TRUE) get_series(c(\"E_NF_HI\", \"ECT_HI\", \"E_TU_HAW\"), freq = \"M\") get_series(c(\"E_NF__HI_M\", \"ECT__HI_M\", \"VAP__HI_W\")) }"},{"path":"https://uhero.github.io/fcutils/reference/get_series_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a single series from udaman using series name — get_series_1","title":"Download a single series from udaman using series name — get_series_1","text":"Download single series udaman using series name","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a single series from udaman using series name — get_series_1","text":"","code":"get_series_1(ser_id, expand = \"true\", rename = \"compact\", descr = FALSE)"},{"path":"https://uhero.github.io/fcutils/reference/get_series_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a single series from udaman using series name — get_series_1","text":"ser_id udaman series name expand \"true\" \"raw\" (\"true\" downloads formatted data, \"raw\" downloads raw units) rename \"compact\" (default), \"full\", \"\". \"compact\": @ replaced _ frequency; \"full\": @ replaced __ . _; \"\": renaming, keep UDAMAN names descr TRUE add udaman series name series description parentheses","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a single series from udaman using series name — get_series_1","text":"time data single series combined tibble","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a single series from udaman using series name — get_series_1","text":"","code":"if (FALSE) { # interactive() get_series_1(ser_id = \"VISNS@HI.M\") }"},{"path":"https://uhero.github.io/fcutils/reference/get_series_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Download series listed in an export table from udaman — get_series_exp","title":"Download series listed in an export table from udaman — get_series_exp","text":"Download series listed export table udaman","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download series listed in an export table from udaman — get_series_exp","text":"","code":"get_series_exp(   exp_id,   format = \"wide\",   save_loc = \"data/raw\",   expand = \"true\",   rename = \"compact\",   descr = FALSE )"},{"path":"https://uhero.github.io/fcutils/reference/get_series_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download series listed in an export table from udaman — get_series_exp","text":"exp_id export id format \"wide\" (default) \"long\" \"xts\" save_loc location save csv retrieved data, set NULL avoid saving expand \"true\" \"raw\" (\"true\" downloads formatted data, \"raw\" downloads raw units) rename \"compact\" (default), \"full\", \"\". \"compact\": @ replaced _ frequency; \"full\": @ replaced __ . _; \"\": renaming, keep UDAMAN names descr TRUE add udaman series name series description parentheses","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download series listed in an export table from udaman — get_series_exp","text":"time data series combined tibble","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_series_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download series listed in an export table from udaman — get_series_exp","text":"","code":"if (FALSE) { get_series_exp(exp_id = 74) get_series_exp(74, format = \"xts\") get_series_exp(74, save_loc = NULL) }"},{"path":"https://uhero.github.io/fcutils/reference/get_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a series name from variable components and retrieve the series — get_var","title":"Construct a series name from variable components and retrieve the series — get_var","text":"Construct series name variable components retrieve series","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a series name from variable components and retrieve the series — get_var","text":"","code":"get_var(ser_in, env = parent.frame())"},{"path":"https://uhero.github.io/fcutils/reference/get_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a series name from variable components and retrieve the series — get_var","text":"ser_in variable name (string substituted expressions) env environment expression evaluated","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a series name from variable components and retrieve the series — get_var","text":"variable","code":""},{"path":"https://uhero.github.io/fcutils/reference/get_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a series name from variable components and retrieve the series — get_var","text":"","code":"if (FALSE) { ser_i <- \"_NF\" cnty_i <- \"HI\" get_series_exp(74, save_loc = NULL) |>   tsbox::ts_long() |>   tsbox::ts_xts() %$% get_var(\"E{ser_i}@{cnty_i}.Q\") }"},{"path":"https://uhero.github.io/fcutils/reference/grapes-plus-equals-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"In place addition — %+=%","title":"In place addition — %+=%","text":"Warning: Typing x %+=% y/2 returns x <- (x + y)/2. Adding parentheses, .e. x %+=% (y/2) solves problem.","code":""},{"path":"https://uhero.github.io/fcutils/reference/grapes-plus-equals-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"In place addition — %+=%","text":"","code":"e1 %+=% e2"},{"path":"https://uhero.github.io/fcutils/reference/grapes-plus-equals-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"In place addition — %+=%","text":"e1 first addend (returned sum) e2 second addend","code":""},{"path":"https://uhero.github.io/fcutils/reference/grapes-plus-equals-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"In place addition — %+=%","text":"sum two addends replacing values first addend","code":""},{"path":"https://uhero.github.io/fcutils/reference/grapes-plus-equals-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"In place addition — %+=%","text":"","code":"if (FALSE) { add_QMOD.xts$VISUS_HI[pq(2022.3, 2023.4)] <- add_QMOD.xts$VISUS_HI[pq(2022.3, 2023.4)] +   c(0.01, -0.04, rep(-0.025, 4)) add_QMOD.xts$VISUS_HI[pq(2022.3, 2023.4)] %+=% c(0.01, -0.04, rep(-0.025, 4)) # easier on the eye }"},{"path":"https://uhero.github.io/fcutils/reference/ma.html","id":null,"dir":"Reference","previous_headings":"","what":"Backward looking moving average — ma","title":"Backward looking moving average — ma","text":"Backward looking moving average","code":""},{"path":"https://uhero.github.io/fcutils/reference/ma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Backward looking moving average — ma","text":"","code":"ma(ser, ord)"},{"path":"https://uhero.github.io/fcutils/reference/ma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Backward looking moving average — ma","text":"ser series (xts, long wide tbl) ord numeric order (window length) moving average","code":""},{"path":"https://uhero.github.io/fcutils/reference/ma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Backward looking moving average — ma","text":"object class input containing moving average","code":""},{"path":"https://uhero.github.io/fcutils/reference/ma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Backward looking moving average — ma","text":"","code":"test <- make_xts(   start = lubridate::ymd(\"2010-01-01\"), end = lubridate::ymd(\"2015-01-01\"),   per = \"quarter\", val = 0:20 ) |>   magrittr::set_names(c(\"test\")) test <- test |>   cbind(test * 2) |>   magrittr::set_names(c(\"test1\", \"test2\")) test |> ma(3) #>            test1 test2 #> 2010-01-01    NA    NA #> 2010-04-01    NA    NA #> 2010-07-01     1     2 #> 2010-10-01     2     4 #> 2011-01-01     3     6 #> 2011-04-01     4     8 #> 2011-07-01     5    10 #> 2011-10-01     6    12 #> 2012-01-01     7    14 #> 2012-04-01     8    16 #> 2012-07-01     9    18 #> 2012-10-01    10    20 #> 2013-01-01    11    22 #> 2013-04-01    12    24 #> 2013-07-01    13    26 #> 2013-10-01    14    28 #> 2014-01-01    15    30 #> 2014-04-01    16    32 #> 2014-07-01    17    34 #> 2014-10-01    18    36 #> 2015-01-01    19    38 test |>   tsbox::ts_tbl() |>   ma(3) #> # A tibble: 42 × 3 #>    id    time       value #>    <chr> <date>     <dbl> #>  1 test1 2010-01-01    NA #>  2 test1 2010-04-01    NA #>  3 test1 2010-07-01     1 #>  4 test1 2010-10-01     2 #>  5 test1 2011-01-01     3 #>  6 test1 2011-04-01     4 #>  7 test1 2011-07-01     5 #>  8 test1 2011-10-01     6 #>  9 test1 2012-01-01     7 #> 10 test1 2012-04-01     8 #> # ℹ 32 more rows test |>   tsbox::ts_tbl() |>   tsbox::ts_wide() |>   ma(3) #> # A tibble: 21 × 3 #>    time       test1 test2 #>    <date>     <dbl> <dbl> #>  1 2010-01-01    NA    NA #>  2 2010-04-01    NA    NA #>  3 2010-07-01     1     2 #>  4 2010-10-01     2     4 #>  5 2011-01-01     3     6 #>  6 2011-04-01     4     8 #>  7 2011-07-01     5    10 #>  8 2011-10-01     6    12 #>  9 2012-01-01     7    14 #> 10 2012-04-01     8    16 #> # ℹ 11 more rows"},{"path":"https://uhero.github.io/fcutils/reference/make_xts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create xts and fill with values — make_xts","title":"Create xts and fill with values — make_xts","text":"Create xts fill values","code":""},{"path":"https://uhero.github.io/fcutils/reference/make_xts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create xts and fill with values — make_xts","text":"","code":"make_xts(start = bnk_start, end = bnk_end, per = \"year\", val = NA_real_)"},{"path":"https://uhero.github.io/fcutils/reference/make_xts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create xts and fill with values — make_xts","text":"start date series start (string: \"yyyy-mm-dd\") end date series end (string: \"yyyy-mm-dd\") per periodicity series (string: \"quarter\", \"year\") val values fill (scalar vector)","code":""},{"path":"https://uhero.github.io/fcutils/reference/make_xts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create xts and fill with values — make_xts","text":"xts series","code":""},{"path":"https://uhero.github.io/fcutils/reference/make_xts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create xts and fill with values — make_xts","text":"","code":"make_xts() #>            value #> 1900-01-01    NA #> 1901-01-01    NA #> 1902-01-01    NA #> 1903-01-01    NA #> 1904-01-01    NA #> 1905-01-01    NA #> 1906-01-01    NA #> 1907-01-01    NA #> 1908-01-01    NA #> 1909-01-01    NA #>        ...       #> 2051-01-01    NA #> 2052-01-01    NA #> 2053-01-01    NA #> 2054-01-01    NA #> 2055-01-01    NA #> 2056-01-01    NA #> 2057-01-01    NA #> 2058-01-01    NA #> 2059-01-01    NA #> 2060-01-01    NA make_xts(start = lubridate::ymd(\"2010-01-01\"), per = \"quarter\", val = 0) #>            value #> 2010-01-01     0 #> 2010-04-01     0 #> 2010-07-01     0 #> 2010-10-01     0 #> 2011-01-01     0 #> 2011-04-01     0 #> 2011-07-01     0 #> 2011-10-01     0 #> 2012-01-01     0 #> 2012-04-01     0 #>        ...       #> 2058-07-01     0 #> 2058-10-01     0 #> 2059-01-01     0 #> 2059-04-01     0 #> 2059-07-01     0 #> 2059-10-01     0 #> 2060-01-01     0 #> 2060-04-01     0 #> 2060-07-01     0 #> 2060-10-01     0"},{"path":"https://uhero.github.io/fcutils/reference/model_equation.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse lm() output and convert into bimets equation (GETS model development) — model_equation","title":"Parse lm() output and convert into bimets equation (GETS model development) — model_equation","text":"Parse lm() output convert bimets equation (GETS model development)","code":""},{"path":"https://uhero.github.io/fcutils/reference/model_equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse lm() output and convert into bimets equation (GETS model development) — model_equation","text":"","code":"model_equation(model, ...)"},{"path":"https://uhero.github.io/fcutils/reference/model_equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse lm() output and convert into bimets equation (GETS model development) — model_equation","text":"model model estimated lm() (lm object) ... arguments format coefficients e.g. digits = 3","code":""},{"path":"https://uhero.github.io/fcutils/reference/model_equation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse lm() output and convert into bimets equation (GETS model development) — model_equation","text":"character vector containing estimated equation (1) bimets components (2:4)","code":""},{"path":"https://uhero.github.io/fcutils/reference/model_equation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse lm() output and convert into bimets equation (GETS model development) — model_equation","text":"","code":"if (FALSE) { # this function combines coefficient estimates and variable names into an equation # in vector element 1 and into bimets components in vector elements 2-4. # https://stats.stackexchange.com/questions/63600/ # how-to-translate-the-results-from-lm-to-an-equation data(\"UKDriverDeaths\", package = \"datasets\") uk <- log10(UKDriverDeaths) dfm <- dynlm::dynlm(uk ~ L(uk, 1:3) + L(log(uk), c(5:6, 12))) model_equation(dfm) # (1) \"uk = - 0.12255631 + 0.42870091 * L(uk, 1:3)1 + 0.06306114 * L(uk, 1:3)2 - 0.09778518 * # L(uk, 1:3)3 + 0.37480999 * L(log(uk), c(5:6, 12))5 - 0.22709846 * L(log(uk), c(5:6, 12))6 + # 1.62340449 * L(log(uk), c(5:6, 12))12\" # (2) \"BEHAVIORAL> uk\" # (3) \"EQ> uk = b0 + b1 * TSLAG(uk, 1) + b2 * TSLAG(uk, 2) + b3 * TSLAG(uk, 3) + b4 * # TSLAG(LOG(uk), 5) + b5 * TSLAG(LOG(uk), 6) + b6 * TSLAG(LOG(uk), 12)\" # (4) \"COEFF> b0 b1 b2 b3 b4 b5 b6\" ## regression on multiple lags in a single L() call dfm <- dynlm::dynlm(d(log(uk)) ~ L(uk, c(1, 11, 12)), start = c(1975, 1), end = c(1982, 12)) model_equation(dfm) # (1) \"d(log(uk)) = 0.1018542 - 0.2379287 * L(uk, c(1, 11, 12))1 + 0.0368355 * # L(uk, c(1, 11, 12))11 + 0.1689896 * L(uk, c(1, 11, 12))12\" # (2) \"BEHAVIORAL> TSDELTA_LOG_uk\" # (3) \"EQ> TSDELTA(LOG(uk)) = b0 + b1 * TSLAG(uk, 1) + b2 * TSLAG(uk, 11) + b3 * TSLAG(uk, 12)\" # (4) \"COEFF> b0 b1 b2 b3\" }"},{"path":"https://uhero.github.io/fcutils/reference/mtd_cum.html","id":null,"dir":"Reference","previous_headings":"","what":"Month to date sum or average — mtd_cum","title":"Month to date sum or average — mtd_cum","text":"Month date sum average","code":""},{"path":"https://uhero.github.io/fcutils/reference/mtd_cum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Month to date sum or average — mtd_cum","text":"","code":"mtd_cum(long_tbl_in, avg = TRUE)"},{"path":"https://uhero.github.io/fcutils/reference/mtd_cum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Month to date sum or average — mtd_cum","text":"long_tbl_in long tibble time series (produced ts_long() example) avg true, year date average, false, year date sum","code":""},{"path":"https://uhero.github.io/fcutils/reference/mtd_cum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Month to date sum or average — mtd_cum","text":"long tibble time series containing year date sum average","code":""},{"path":"https://uhero.github.io/fcutils/reference/mtd_cum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Month to date sum or average — mtd_cum","text":"","code":"if (FALSE) { get_series(c(\"VISPNS@HI.D\", \"VAPNS@HI.D\")) |>   tsbox::ts_long() |>   mtd_cum() test <- get_series(\"VAPNS@HI.D\") |>   tsbox::ts_long() |>   mtd_cum() test %ts/% tsbox::ts_lag(test, \"3 years\") |> tail() }"},{"path":"https://uhero.github.io/fcutils/reference/mtd_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Month to date growth rate — mtd_gr","title":"Month to date growth rate — mtd_gr","text":"Month date growth rate","code":""},{"path":"https://uhero.github.io/fcutils/reference/mtd_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Month to date growth rate — mtd_gr","text":"","code":"mtd_gr(long_tbl_in, avg = TRUE)"},{"path":"https://uhero.github.io/fcutils/reference/mtd_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Month to date growth rate — mtd_gr","text":"long_tbl_in long tibble time series (produced ts_long() example) avg true, year date average, false, year date sum calculation","code":""},{"path":"https://uhero.github.io/fcutils/reference/mtd_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Month to date growth rate — mtd_gr","text":"long tibble time series containing year date growth rate","code":""},{"path":"https://uhero.github.io/fcutils/reference/mtd_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Month to date growth rate — mtd_gr","text":"","code":"if (FALSE) { get_series(c(\"VISPNS@HI.D\", \"VAPNS@HI.D\")) |>   tsbox::ts_long() |>   mtd_gr() |>   tail() }"},{"path":"https://uhero.github.io/fcutils/reference/nqtrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number of quarters between two dates yyyyQq or yyyy.q — nqtrs","title":"Calculate number of quarters between two dates yyyyQq or yyyy.q — nqtrs","text":"Calculate number quarters two dates yyyyQq yyyy.q","code":""},{"path":"https://uhero.github.io/fcutils/reference/nqtrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number of quarters between two dates yyyyQq or yyyy.q — nqtrs","text":"","code":"nqtrs(dat1 = \"\", dat2 = \"\")"},{"path":"https://uhero.github.io/fcutils/reference/nqtrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number of quarters between two dates yyyyQq or yyyy.q — nqtrs","text":"dat1 date period start (string: yyyyQq yyyy.q) dat2 date period end (string: yyyyQq yyyy.q)","code":""},{"path":"https://uhero.github.io/fcutils/reference/nqtrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number of quarters between two dates yyyyQq or yyyy.q — nqtrs","text":"numeric length date range quarters","code":""},{"path":"https://uhero.github.io/fcutils/reference/nqtrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number of quarters between two dates yyyyQq or yyyy.q — nqtrs","text":"","code":"nqtrs(\"2010Q1\", \"2020Q4\") #> [1] 44 nqtrs(2010.1, 2020.4) #> [1] 44"},{"path":"https://uhero.github.io/fcutils/reference/p.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate dates to obtain period — p","title":"Concatenate dates to obtain period — p","text":"Concatenate dates obtain period","code":""},{"path":"https://uhero.github.io/fcutils/reference/p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate dates to obtain period — p","text":"","code":"p(dat1 = \"\", dat2 = \"\")"},{"path":"https://uhero.github.io/fcutils/reference/p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate dates to obtain period — p","text":"dat1 date period start (string: yyyy-mm-dd) dat2 date period end (string: yyyy-mm-dd)","code":""},{"path":"https://uhero.github.io/fcutils/reference/p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate dates to obtain period — p","text":"string containing date range","code":""},{"path":"https://uhero.github.io/fcutils/reference/p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate dates to obtain period — p","text":"","code":"p(\"2010-01-01\", \"2020-01-01\") #> [1] \"2010-01-01/2020-01-01\" p(2010, 2020) # for annual period only #> [1] \"2010/2020\""},{"path":"https://uhero.github.io/fcutils/reference/pc_to_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert quarterly growth to annualized growth — pc_to_pca","title":"Convert quarterly growth to annualized growth — pc_to_pca","text":"Convert quarterly growth annualized growth","code":""},{"path":"https://uhero.github.io/fcutils/reference/pc_to_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert quarterly growth to annualized growth — pc_to_pca","text":"","code":"pc_to_pca(ser_in)"},{"path":"https://uhero.github.io/fcutils/reference/pc_to_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert quarterly growth to annualized growth — pc_to_pca","text":"ser_in series containing quarterly growth (percent)","code":""},{"path":"https://uhero.github.io/fcutils/reference/pc_to_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert quarterly growth to annualized growth — pc_to_pca","text":"series containing annualized growth (percent)","code":""},{"path":"https://uhero.github.io/fcutils/reference/pc_to_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert quarterly growth to annualized growth — pc_to_pca","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` tsbox::ts_c(test1 |> tsbox::ts_pc() |> pc_to_pca(), test1 |> tsbox::ts_pca()) #>            pc_to_pca(tsbox::ts_pc(test1)) tsbox::ts_pca(test1) #> 2016-01-01                             NA                   NA #> 2016-04-01                      0.7417883            0.7417883 #> 2016-07-01                      0.7404152            0.7404152 #> 2016-10-01                      0.7390472            0.7390472 #> 2017-01-01                      0.7390547            0.7390547 #> 2017-04-01                      0.7354119            0.7354119 #> 2017-07-01                      0.7340623            0.7340623 #> 2017-10-01                      0.7327177            0.7327177 #> 2018-01-01                      0.7331329            0.7331329 #> 2018-04-01                      0.7288721            0.7288721 #> 2018-07-01                      0.7275464            0.7275464 #> 2018-10-01                      0.7262255            0.7262255 #> 2019-01-01                      0.7279676            0.7279676 #> 2019-04-01                      0.7215575            0.7215575 #> 2019-07-01                      0.7202582            0.7202582 #> 2019-10-01                      0.7189636            0.7189636 #> 2020-01-01                      0.7226676            0.7226676 #> 2020-04-01                      0.7130563            0.7130563 #> 2020-07-01                      0.7117874            0.7117874 #> 2020-10-01                      0.7105231            0.7105231 #> 2021-01-01                      0.7092632            0.7092632 #> 2021-04-01                      0.7080078            0.7080078 #> 2021-07-01                      0.7067568            0.7067568 #> 2021-10-01                      0.7055103            0.7055103"},{"path":"https://uhero.github.io/fcutils/reference/pca_to_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert annualized growth to quarterly growth — pca_to_pc","title":"Convert annualized growth to quarterly growth — pca_to_pc","text":"Convert annualized growth quarterly growth","code":""},{"path":"https://uhero.github.io/fcutils/reference/pca_to_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert annualized growth to quarterly growth — pca_to_pc","text":"","code":"pca_to_pc(ser_in)"},{"path":"https://uhero.github.io/fcutils/reference/pca_to_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert annualized growth to quarterly growth — pca_to_pc","text":"ser_in series containing annualized growth (percent)","code":""},{"path":"https://uhero.github.io/fcutils/reference/pca_to_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert annualized growth to quarterly growth — pca_to_pc","text":"series containing quarterly growth (percent)","code":""},{"path":"https://uhero.github.io/fcutils/reference/pca_to_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert annualized growth to quarterly growth — pca_to_pc","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` tsbox::ts_c(test1 |> tsbox::ts_pca() |> pca_to_pc(), test1 |> tsbox::ts_pc()) #>            pca_to_pc(tsbox::ts_pca(test1)) tsbox::ts_pc(test1) #> 2016-01-01                              NA                  NA #> 2016-04-01                       0.1849334           0.1849334 #> 2016-07-01                       0.1845921           0.1845921 #> 2016-10-01                       0.1842520           0.1842520 #> 2017-01-01                       0.1842538           0.1842538 #> 2017-04-01                       0.1833481           0.1833481 #> 2017-07-01                       0.1830126           0.1830126 #> 2017-10-01                       0.1826782           0.1826782 #> 2018-01-01                       0.1827815           0.1827815 #> 2018-04-01                       0.1817221           0.1817221 #> 2018-07-01                       0.1813925           0.1813925 #> 2018-10-01                       0.1810640           0.1810640 #> 2019-01-01                       0.1814972           0.1814972 #> 2019-04-01                       0.1799033           0.1799033 #> 2019-07-01                       0.1795802           0.1795802 #> 2019-10-01                       0.1792583           0.1792583 #> 2020-01-01                       0.1801793           0.1801793 #> 2020-04-01                       0.1777894           0.1777894 #> 2020-07-01                       0.1774738           0.1774738 #> 2020-10-01                       0.1771594           0.1771594 #> 2021-01-01                       0.1768461           0.1768461 #> 2021-04-01                       0.1765339           0.1765339 #> 2021-07-01                       0.1762228           0.1762228 #> 2021-10-01                       0.1759128           0.1759128"},{"path":"https://uhero.github.io/fcutils/reference/pcmp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate multi-period average growth — pcmp","title":"Calculate multi-period average growth — pcmp","text":"Calculate multi-period average growth","code":""},{"path":"https://uhero.github.io/fcutils/reference/pcmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate multi-period average growth — pcmp","text":"","code":"pcmp(ser_in, lag_in = 1)"},{"path":"https://uhero.github.io/fcutils/reference/pcmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate multi-period average growth — pcmp","text":"ser_in name xts series growth calculated lag_in length period growth calculated","code":""},{"path":"https://uhero.github.io/fcutils/reference/pcmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate multi-period average growth — pcmp","text":"series containing average growth ser_in (percent)","code":""},{"path":"https://uhero.github.io/fcutils/reference/pcmp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate multi-period average growth — pcmp","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` tsbox::ts_c(pcmp(`ncen@us.sola`, lag_in = 3), tsbox::ts_pc(`ncen@us.sola`)) #>            pcmp(`ncen@us.sola`, lag_in = 3) tsbox::ts_pc(`ncen@us.sola`) #> 2016-01-01                               NA                           NA #> 2017-01-01                               NA                    0.7376874 #> 2018-01-01                               NA                    0.7313810 #> 2019-01-01                        0.7313268                    0.7249124 #> 2020-01-01                        0.7246565                    0.7176765 #> 2021-01-01                        0.7172848                    0.7092660 tsbox::ts_c(   pcmp(test1, lag_in = 4),   tsbox::ts_pcy(test1),   tsbox::ts_pca(test1),   tsbox::ts_pc(test1) ) #>            pcmp(test1, lag_in = 4) tsbox::ts_pcy(test1) tsbox::ts_pca(test1) #> 2016-01-01                      NA                   NA                   NA #> 2016-04-01                      NA                   NA            0.7417883 #> 2016-07-01                      NA                   NA            0.7404152 #> 2016-10-01                      NA                   NA            0.7390472 #> 2017-01-01               0.1845078            0.7400764            0.7390547 #> 2017-04-01               0.1841115            0.7384823            0.7354119 #> 2017-07-01               0.1837166            0.7368940            0.7340623 #> 2017-10-01               0.1833232            0.7353116            0.7327177 #> 2018-01-01               0.1829551            0.7338312            0.7331329 #> 2018-04-01               0.1825486            0.7321963            0.7288721 #> 2018-07-01               0.1821436            0.7305673            0.7275464 #> 2018-10-01               0.1817400            0.7289442            0.7262255 #> 2019-01-01               0.1814189            0.7276529            0.7279676 #> 2019-04-01               0.1809642            0.7258242            0.7215575 #> 2019-07-01               0.1805112            0.7240022            0.7202582 #> 2019-10-01               0.1800598            0.7221867            0.7189636 #> 2020-01-01               0.1797303            0.7208617            0.7226676 #> 2020-04-01               0.1792018            0.7187364            0.7130563 #> 2020-07-01               0.1786752            0.7166186            0.7117874 #> 2020-10-01               0.1781505            0.7145085            0.7105231 #> 2021-01-01               0.1773172            0.7111575            0.7092632 #> 2021-04-01               0.1770033            0.7098954            0.7080078 #> 2021-07-01               0.1766906            0.7086377            0.7067568 #> 2021-10-01               0.1763789            0.7073845            0.7055103 #>            tsbox::ts_pc(test1) #> 2016-01-01                  NA #> 2016-04-01           0.1849334 #> 2016-07-01           0.1845921 #> 2016-10-01           0.1842520 #> 2017-01-01           0.1842538 #> 2017-04-01           0.1833481 #> 2017-07-01           0.1830126 #> 2017-10-01           0.1826782 #> 2018-01-01           0.1827815 #> 2018-04-01           0.1817221 #> 2018-07-01           0.1813925 #> 2018-10-01           0.1810640 #> 2019-01-01           0.1814972 #> 2019-04-01           0.1799033 #> 2019-07-01           0.1795802 #> 2019-10-01           0.1792583 #> 2020-01-01           0.1801793 #> 2020-04-01           0.1777894 #> 2020-07-01           0.1774738 #> 2020-10-01           0.1771594 #> 2021-01-01           0.1768461 #> 2021-04-01           0.1765339 #> 2021-07-01           0.1762228 #> 2021-10-01           0.1759128"},{"path":"https://uhero.github.io/fcutils/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://uhero.github.io/fcutils/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://uhero.github.io/fcutils/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://uhero.github.io/fcutils/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive plot with level and growth rate — plot_1","title":"Interactive plot with level and growth rate — plot_1","text":"Interactive plot level growth rate","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive plot with level and growth rate — plot_1","text":"","code":"plot_1(   ser,   rng_start = as.character(Sys.Date() - lubridate::years(15)),   rng_end = as.character(Sys.Date()),   height = 300,   width = 900,   yoy_gr = TRUE,   gr_1 = TRUE )"},{"path":"https://uhero.github.io/fcutils/reference/plot_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive plot with level and growth rate — plot_1","text":"ser time series plot (e.g. history, oldsol, sol) rng_start start zoom range (\"YYYY-MM-DD\") rng_end end zoom range (\"YYYY-MM-DD\") height height single panel (px) width width single panel (px) yoy_gr year--year (default) annualized growth gr_1 show growth first series (default)","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive plot with level and growth rate — plot_1","text":"dygraph plot","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive plot with level and growth rate — plot_1","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) `ncen@us.oldsola` <- `ncen@us.sola` `ncen@us.oldsola`[\"2020/2021\"] <- c(352639102, 374998398) `ncen@us.a` <- `ncen@us.sola` `ncen@us.a`[\"2020/2021\"] <- NA test1 <- tsbox::ts_tslist(tsbox::ts_c(`ncen@us.sola`, `ncen@us.oldsola`, `ncen@us.a`)) |>   purrr::map(AtoQ) |>   purrr::reduce(tsbox::ts_c) |>   magrittr::set_names(c(\"ncen@us.sola\", \"ncen@us.oldsola\", \"ncen@us.a\")) #> Joining with `by = join_by(time)` #> Joining with `by = join_by(time)` #> Joining with `by = join_by(time)` plot_1(tsbox::ts_c(`ncen@us.sola`, `ncen@us.oldsola`, `ncen@us.a`), rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true},\"y2\":{\"drawGrid\":false,\"independentTicks\":true}},\"title\":\"ncen@us.sola\",\"labels\":[\"year\",\"ncen@us.sola%\",\"ncen@us.sola\",\"ncen@us.oldsola\",\"ncen@us.a\"],\"retainDateWindow\":false,\"ylabel\":\"% change\",\"y2label\":\"level\",\"series\":{\"ncen@us.sola%\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction barSeriesPlotter(e) {\\n  var g = e.dygraph;\\n  var ctx = e.drawingContext;\\n  var points = e.points;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  ctx.fillStyle = e.color;\\n  ctx.strokeStyle = e.color;\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // Do the actual plotting.\\n  for (var i = 0; i < points.length; i++) {\\n    var p = points[i];\\n    var center_x = p.canvasx;\\n\\n    ctx.fillRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n\\n    ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n  }\\n}\\n\"},\"ncen@us.sola\":{\"axis\":\"y2\",\"strokeWidth\":2,\"group\":\"ncen@us.solancen@us.oldsolancen@us.a\"},\"ncen@us.oldsola\":{\"axis\":\"y2\",\"strokeWidth\":2,\"group\":\"ncen@us.solancen@us.oldsolancen@us.a\"},\"ncen@us.a\":{\"axis\":\"y2\",\"strokeWidth\":2,\"group\":\"ncen@us.solancen@us.oldsolancen@us.a\"}},\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"#90C3DC\",\"#1D667F\",\"#F6A01B\",\"#9BBB59\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false,\"legend\":\"follow\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":true,\"hideOverlayOnMouseOut\":true,\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\"},\"scale\":\"yearly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\"],[null,0.7376874156797664,0.7313810145460398,0.7249123629646359,0.7176765449625755,0.7092659840093107],[323127513,325511184,327891911,330268840,332639102,334998398],[323127513,325511184,327891911,330268840,352639102,374998398],[323127513,325511184,327891911,330268840,null,null]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[\"attrs.series.ncen@us\\\\.sola%.plotter\",\"attrs.interactionModel\"],\"jsHooks\":[]}plot_1(test1, rng_start = \"2017-01-01\", gr_1 = FALSE)  {\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true},\"y2\":{\"drawGrid\":false,\"independentTicks\":true}},\"title\":\"ncen@us.sola\",\"labels\":[\"quarter\",\"ncen@us.sola%\",\"ncen@us.oldsola%\",\"ncen@us.a%\",\"ncen@us.sola\",\"ncen@us.oldsola\",\"ncen@us.a\"],\"retainDateWindow\":false,\"ylabel\":\"% change\",\"y2label\":\"level\",\"series\":{\"ncen@us.sola%\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Multi-column Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n * \\n * Modified to apply only to a supplied group of sets\\n */\\n\\n  // Multiple column bar chart\\nfunction multiColumnGroupPlotter(e) {\\n\\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var j = 0; j < sets.length; j++) {\\n    var points = sets[j];\\n    for (var i = 1; i < points.length; i++) {\\n      var sep = points[i].canvasx - points[i - 1].canvasx;\\n      if (sep < min_sep) min_sep = sep;\\n    }\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  for (var i = 0; i < groupIdx.length; i++) {\\n    fillColors.push(strokeColors[groupIdx[i]]);\\n  }\\n\\n  for (var j = 0; j < sets.length; j++) {\\n    ctx.fillStyle = fillColors[j];\\n    ctx.strokeStyle = fillColors[j];\\n    for (var i = 0; i < sets[j].length; i++) {\\n      var p = sets[j][i];\\n      var center_x = p.canvasx;\\n      var x_left = center_x - (bar_width / 2) * (1 - j/(sets.length-1));\\n\\n      ctx.fillRect(x_left, p.canvasy,\\n        bar_width/sets.length, y_bottom - p.canvasy);\\n\\n      ctx.strokeRect(x_left, p.canvasy,\\n        bar_width/sets.length, y_bottom - p.canvasy);\\n    }\\n  }\\n}\",\"group\":\"ncen@us.sola%ncen@us.oldsola%ncen@us.a%\"},\"ncen@us.oldsola%\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Multi-column Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n * \\n * Modified to apply only to a supplied group of sets\\n */\\n\\n  // Multiple column bar chart\\nfunction multiColumnGroupPlotter(e) {\\n\\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var j = 0; j < sets.length; j++) {\\n    var points = sets[j];\\n    for (var i = 1; i < points.length; i++) {\\n      var sep = points[i].canvasx - points[i - 1].canvasx;\\n      if (sep < min_sep) min_sep = sep;\\n    }\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  for (var i = 0; i < groupIdx.length; i++) {\\n    fillColors.push(strokeColors[groupIdx[i]]);\\n  }\\n\\n  for (var j = 0; j < sets.length; j++) {\\n    ctx.fillStyle = fillColors[j];\\n    ctx.strokeStyle = fillColors[j];\\n    for (var i = 0; i < sets[j].length; i++) {\\n      var p = sets[j][i];\\n      var center_x = p.canvasx;\\n      var x_left = center_x - (bar_width / 2) * (1 - j/(sets.length-1));\\n\\n      ctx.fillRect(x_left, p.canvasy,\\n        bar_width/sets.length, y_bottom - p.canvasy);\\n\\n      ctx.strokeRect(x_left, p.canvasy,\\n        bar_width/sets.length, y_bottom - p.canvasy);\\n    }\\n  }\\n}\",\"group\":\"ncen@us.sola%ncen@us.oldsola%ncen@us.a%\"},\"ncen@us.a%\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Multi-column Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n * \\n * Modified to apply only to a supplied group of sets\\n */\\n\\n  // Multiple column bar chart\\nfunction multiColumnGroupPlotter(e) {\\n\\n  // BEGIN HEADER BLOCK\\n  // This first block can be copied to other plotters to capture the group \\n  var g = e.dygraph;\\n  \\n  var group;\\n  var groupIdx = [];\\n  var sets = [];\\n  var allSets = e.allSeriesPoints;\\n  var minIdx = Infinity;\\n  var setName = e.setName;\\n  var setNames = g.getLabels().slice(1);\\n  \\n  var currGroup = g.attr_(\\\"group\\\", setName);\\n  \\n  for (var setIdx = 0; setIdx < allSets.length; setIdx++) {\\n    // get the name and group of the current setIdx\\n    setName = setNames[setIdx];\\n    group = g.attr_(\\\"group\\\", setName);\\n\\n    if (group === currGroup) {\\n      //save the indv index and the points\\n      groupIdx.push(setIdx);\\n      sets.push(allSets[setIdx]);\\n      \\n      // capturing the min indx helps to ensure we don't render the plotter\\n      // multiple times\\n      if (setIdx < minIdx) minIdx = setIdx;\\n    }\\n  }\\n  \\n  // We'll employ the plotter only on the first of the group\\n  if (e.seriesIndex !== minIdx) return;\\n  // END HEADER BLOCK\\n \\n  var ctx = e.drawingContext;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var j = 0; j < sets.length; j++) {\\n    var points = sets[j];\\n    for (var i = 1; i < points.length; i++) {\\n      var sep = points[i].canvasx - points[i - 1].canvasx;\\n      if (sep < min_sep) min_sep = sep;\\n    }\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  var fillColors = [];\\n  var strokeColors = g.getColors();\\n  for (var i = 0; i < groupIdx.length; i++) {\\n    fillColors.push(strokeColors[groupIdx[i]]);\\n  }\\n\\n  for (var j = 0; j < sets.length; j++) {\\n    ctx.fillStyle = fillColors[j];\\n    ctx.strokeStyle = fillColors[j];\\n    for (var i = 0; i < sets[j].length; i++) {\\n      var p = sets[j][i];\\n      var center_x = p.canvasx;\\n      var x_left = center_x - (bar_width / 2) * (1 - j/(sets.length-1));\\n\\n      ctx.fillRect(x_left, p.canvasy,\\n        bar_width/sets.length, y_bottom - p.canvasy);\\n\\n      ctx.strokeRect(x_left, p.canvasy,\\n        bar_width/sets.length, y_bottom - p.canvasy);\\n    }\\n  }\\n}\",\"group\":\"ncen@us.sola%ncen@us.oldsola%ncen@us.a%\"},\"ncen@us.sola\":{\"axis\":\"y2\",\"strokeWidth\":2,\"group\":\"ncen@us.solancen@us.oldsolancen@us.a\"},\"ncen@us.oldsola\":{\"axis\":\"y2\",\"strokeWidth\":2,\"group\":\"ncen@us.solancen@us.oldsolancen@us.a\"},\"ncen@us.a\":{\"axis\":\"y2\",\"strokeWidth\":2,\"group\":\"ncen@us.solancen@us.oldsolancen@us.a\"}},\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"#90C3DC\",\"#FFD9BD\",\"#CAEA8D\",\"#1D667F\",\"#F6A01B\",\"#9BBB59\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false,\"legend\":\"follow\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":true,\"hideOverlayOnMouseOut\":true,\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\"},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[null,null,null,null,0.7400763703093727,0.7384822639493915,0.7368940319336215,0.7353116418509886,0.7338312204504316,0.732196255119244,0.7305672632399896,0.7289442121357403,0.7276529146919897,0.7258242231557022,0.724002153824288,0.7221866707914693,0.7208617127546058,0.7187363609159725,0.7166186288175114,0.7145084755555198,0.7111574833049916,0.7098953648023709,0.7086377182236481,0.7073845198435347],[null,null,null,null,0.7400763703093727,0.7384822639493915,0.7368940319336215,0.7353116418509886,0.7338312204504316,0.732196255119244,0.7305672632399896,0.7289442121357403,-1.565921120714464,-0.03731366520846047,1.485758274039672,3.003324711170152,6.95115410198528,6.831605352787151,6.716071339234819,6.604353164275167,6.494992717100345,6.391215472236378,6.290702386181879,6.193301839531151],[null,null,null,null,0.7400763703093727,0.7384822639493915,0.7368940319336215,0.7353116418509886,0.7338312204504316,0.732196255119244,0.7305672632399896,0.7289442121357403,0.7268883517872915,0.7255698311406267,0.7242560852269708,0.7229470881572331,null,null,null,null,null,null,null,null],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,329379991.75,329972557.25,330565122.75,331157688.25,331754366,332344190,332934014,333523838,334113662,334703486,335293310,335883134],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,321879991.75,327472557.25,333065122.75,338657688.25,344254366,349844190,355434014,361023838,366613662,372203486,377793310,383383134],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,329377491.625,329971723.875,330565956.125,331160188.375,null,null,null,null,null,null,null,null]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[\"attrs.series.ncen@us\\\\.sola%.plotter\",\"attrs.series.ncen@us\\\\.oldsola%.plotter\",\"attrs.series.ncen@us\\\\.a%.plotter\",\"attrs.interactionModel\"],\"jsHooks\":[]}test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` plot_1(`ncen@us.sola`, rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true},\"y2\":{\"drawGrid\":false,\"independentTicks\":true}},\"title\":\"value\",\"labels\":[\"year\",\"value%\",\"value\"],\"retainDateWindow\":false,\"ylabel\":\"% change\",\"y2label\":\"level\",\"series\":{\"value%\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction barSeriesPlotter(e) {\\n  var g = e.dygraph;\\n  var ctx = e.drawingContext;\\n  var points = e.points;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  ctx.fillStyle = e.color;\\n  ctx.strokeStyle = e.color;\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // Do the actual plotting.\\n  for (var i = 0; i < points.length; i++) {\\n    var p = points[i];\\n    var center_x = p.canvasx;\\n\\n    ctx.fillRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n\\n    ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n  }\\n}\\n\"},\"value\":{\"axis\":\"y2\",\"strokeWidth\":3}},\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"#90C3DC\",\"#1D667F\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false,\"legend\":\"follow\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":true,\"hideOverlayOnMouseOut\":true,\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\"},\"scale\":\"yearly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\"],[null,0.7376874156797664,0.7313810145460398,0.7249123629646359,0.7176765449625755,0.7092659840093107],[323127513,325511184,327891911,330268840,332639102,334998398]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[\"attrs.series.value%.plotter\",\"attrs.interactionModel\"],\"jsHooks\":[]}plot_1(test1, rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true},\"y2\":{\"drawGrid\":false,\"independentTicks\":true}},\"title\":\"value\",\"labels\":[\"quarter\",\"value%\",\"value\"],\"retainDateWindow\":false,\"ylabel\":\"% change\",\"y2label\":\"level\",\"series\":{\"value%\":{\"axis\":\"y\",\"plotter\":\"/**\\n * Bar Chart plotter is adapted from http://dygraphs.com/tests/plotters.html\\n */\\nfunction barSeriesPlotter(e) {\\n  var g = e.dygraph;\\n  var ctx = e.drawingContext;\\n  var points = e.points;\\n  var axis = g.attr_(\\\"axis\\\", e.setName);\\n  var y_bottom = g.toDomYCoord(0, axis == \\\"y2\\\" ? 1 : 0);\\n\\n  ctx.fillStyle = e.color;\\n  ctx.strokeStyle = e.color;\\n\\n  // Find the minimum separation between x-values.\\n  // This determines the bar width.\\n  var min_sep = Infinity;\\n  for (var i = 1; i < points.length; i++) {\\n    var sep = points[i].canvasx - points[i - 1].canvasx;\\n    if (sep < min_sep) min_sep = sep;\\n  }\\n  var bar_width = Math.floor(2.0 / 3 * min_sep);\\n\\n  // Do the actual plotting.\\n  for (var i = 0; i < points.length; i++) {\\n    var p = points[i];\\n    var center_x = p.canvasx;\\n\\n    ctx.fillRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n\\n    ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\\n      bar_width, y_bottom - p.canvasy);\\n  }\\n}\\n\"},\"value\":{\"axis\":\"y2\",\"strokeWidth\":3}},\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"#90C3DC\",\"#1D667F\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false,\"legend\":\"follow\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":true,\"hideOverlayOnMouseOut\":true,\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\"},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[null,null,null,null,0.7400763703093727,0.7384822639493915,0.7368940319336215,0.7353116418509886,0.7338312204504316,0.732196255119244,0.7305672632399896,0.7289442121357403,0.7276529146919897,0.7258242231557022,0.724002153824288,0.7221866707914693,0.7208617127546058,0.7187363609159725,0.7166186288175114,0.7145084755555198,0.7111574833049916,0.7098953648023709,0.7086377182236481,0.7073845198435347],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,329379991.75,329972557.25,330565122.75,331157688.25,331754366,332344190,332934014,333523838,334113662,334703486,335293310,335883134]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[\"attrs.series.value%.plotter\",\"attrs.interactionModel\"],\"jsHooks\":[]}if (FALSE) { get_series_exp(74, save_loc = NULL, rename = \"no\") |>   tsbox::ts_long() |>   tsbox::ts_xts() |>   magrittr::extract(, c(\"E_NF@HI.Q\", \"ECT@HI.Q\", \"EMN@HI.Q\")) |>   plot_1() }"},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-panel plot of levels, index, and growth rates — plot_comp_2","title":"Two-panel plot of levels, index, and growth rates — plot_comp_2","text":"Two-panel plot levels, index, growth rates","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-panel plot of levels, index, and growth rates — plot_comp_2","text":"","code":"plot_comp_2(   sers,   rng_start = as.character(Sys.Date() - lubridate::years(15)),   rng_end = as.character(Sys.Date()),   height = 300,   width = 900,   yoy_gr = TRUE,   gr_bar = FALSE )"},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-panel plot of levels, index, and growth rates — plot_comp_2","text":"sers vector series plot rng_start start zoom range (\"YYYY-MM-DD\") rng_end end zoom range (\"YYYY-MM-DD\") height height single panel (px) width width single panel (px) yoy_gr year--year (default) annualized growth gr_bar show bars line (default) growth series","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-panel plot of levels, index, and growth rates — plot_comp_2","text":"list two dygraph plots (level, index, growth)","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-panel plot of levels, index, and growth rates — plot_comp_2","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` plot_comp_2(tsbox::ts_c(`ncen@us.sola`, test1), rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"title\":\"Level\",\"labels\":[\"quarter\",\"ncen@us.sola\",\"test1\"],\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}},\"legend\":\"auto\",\"labelsDivWidth\":810,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true},\"scale\":\"quarterly\",\"group\":\"comp\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[323127513,null,null,null,325511184,null,null,null,327891911,null,null,null,330268840,null,null,null,332639102,null,null,null,334998398,null,null,null],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,329379991.75,329972557.25,330565122.75,331157688.25,331754366,332344190,332934014,333523838,334113662,334703486,335293310,335883134]]},\"evals\":[],\"jsHooks\":[]} {\"x\":{\"attrs\":{\"title\":\"Growth\",\"labels\":[\"quarter\",\"ncen@us.sola\",\"test1\"],\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}},\"legend\":\"auto\",\"labelsDivWidth\":810,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\"},\"scale\":\"quarterly\",\"group\":\"comp\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[null,null,null,null,0.7376874156797664,null,null,null,0.7313810145460398,null,null,null,0.7249123629646359,null,null,null,0.7176765449625755,null,null,null,0.7092659840093107,null,null,null],[null,null,null,null,0.7400763703093727,0.7384822639493915,0.7368940319336215,0.7353116418509886,0.7338312204504316,0.732196255119244,0.7305672632399896,0.7289442121357403,0.7276529146919897,0.7258242231557022,0.724002153824288,0.7221866707914693,0.7208617127546058,0.7187363609159725,0.7166186288175114,0.7145084755555198,0.7111574833049916,0.7098953648023709,0.7086377182236481,0.7073845198435347]]},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}if (FALSE) { get_series_exp(74, save_loc = NULL) |>   tsbox::ts_long() |>   tsbox::ts_xts() |>   magrittr::extract(, c(\"E_NF@HI.Q\", \"ECT@HI.Q\", \"EMN@HI.Q\")) |>   plot_comp_2() }"},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_3.html","id":null,"dir":"Reference","previous_headings":"","what":"Three-panel plot of levels, index, and growth rates — plot_comp_3","title":"Three-panel plot of levels, index, and growth rates — plot_comp_3","text":"Three-panel plot levels, index, growth rates","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Three-panel plot of levels, index, and growth rates — plot_comp_3","text":"","code":"plot_comp_3(   sers,   indx_start = as.character(Sys.Date() - lubridate::years(15)),   rng_start = as.character(Sys.Date() - lubridate::years(15)),   rng_end = as.character(Sys.Date()),   height = 300,   width = 900,   yoy_gr = TRUE,   gr_bar = FALSE )"},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Three-panel plot of levels, index, and growth rates — plot_comp_3","text":"sers vector series plot indx_start base period indexed series (\"YYYY-MM-DD\") rng_start start zoom range (\"YYYY-MM-DD\") rng_end end zoom range (\"YYYY-MM-DD\") height height single panel (px) width width single panel (px) yoy_gr year--year (default) annualized growth gr_bar show bars line (default) growth series","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Three-panel plot of levels, index, and growth rates — plot_comp_3","text":"list three dygraph plots (level, index, growth)","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_comp_3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Three-panel plot of levels, index, and growth rates — plot_comp_3","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` plot_comp_3(tsbox::ts_c(`ncen@us.sola`, test1), rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"title\":\"Level\",\"labels\":[\"quarter\",\"ncen@us.sola\",\"test1\"],\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":810,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"#1D667F\",\"#F6A01B\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false},\"scale\":\"quarterly\",\"group\":\"comp\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[323127513,null,null,null,325511184,null,null,null,327891911,null,null,null,330268840,null,null,null,332639102,null,null,null,334998398,null,null,null],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,329379991.75,329972557.25,330565122.75,331157688.25,331754366,332344190,332934014,333523838,334113662,334703486,335293310,335883134]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[],\"jsHooks\":[]} {\"x\":{\"attrs\":{\"title\":\"Index\",\"labels\":[\"quarter\",\"ncen@us.sola\",\"test1\"],\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":810,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"#1D667F\",\"#F6A01B\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false},\"scale\":\"quarterly\",\"group\":\"comp\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[1,null,null,null,1.007376874156798,null,null,null,1.014744637359308,null,null,null,1.022100646688046,null,null,null,1.029436023295237,null,null,null,1.036737462835608,null,null,null],[1,1.00184933440439,1.00369866880878,1.00554800321317,1.007400763703094,1.009247814050461,1.011094864397829,1.012941914745197,1.014793385022203,1.016637488749812,1.01848159247742,1.020325696205029,1.022177558666419,1.02401648990484,1.025855421143261,1.027694352381682,1.029546045323215,1.031376468759561,1.033206892195908,1.035037315632255,1.036867739068601,1.038698162504948,1.040528585941294,1.042359009377641]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[],\"jsHooks\":[]} {\"x\":{\"attrs\":{\"title\":\"Growth\",\"labels\":[\"quarter\",\"ncen@us.sola\",\"test1\"],\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"legend\":\"auto\",\"labelsDivWidth\":810,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":false,\"hideOverlayOnMouseOut\":true,\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"#1D667F\",\"#F6A01B\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false,\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\"},\"scale\":\"quarterly\",\"group\":\"comp\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[null,null,null,null,0.7376874156797664,null,null,null,0.7313810145460398,null,null,null,0.7249123629646359,null,null,null,0.7176765449625755,null,null,null,0.7092659840093107,null,null,null],[null,null,null,null,0.7400763703093727,0.7384822639493915,0.7368940319336215,0.7353116418509886,0.7338312204504316,0.732196255119244,0.7305672632399896,0.7289442121357403,0.7276529146919897,0.7258242231557022,0.724002153824288,0.7221866707914693,0.7208617127546058,0.7187363609159725,0.7166186288175114,0.7145084755555198,0.7111574833049916,0.7098953648023709,0.7086377182236481,0.7073845198435347]],\"fixedtz\":false,\"tzone\":\"UTC\"},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}if (FALSE) { get_series_exp(74, save_loc = NULL) |>   tsbox::ts_long() |>   tsbox::ts_xts() |>   magrittr::extract(, c(\"E_NF@HI.Q\", \"ECT@HI.Q\", \"EMN@HI.Q\")) |>   plot_comp_3() }"},{"path":"https://uhero.github.io/fcutils/reference/plot_fc.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive plot with level and growth rate for forecast series — plot_fc","title":"Interactive plot with level and growth rate for forecast series — plot_fc","text":"Interactive plot level growth rate forecast series","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_fc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive plot with level and growth rate for forecast series — plot_fc","text":"","code":"plot_fc(   ser,   rng_start = as.character(Sys.Date() - lubridate::years(15)),   rng_end = as.character(Sys.Date()),   height = 300,   width = 900,   yoy_gr = TRUE )"},{"path":"https://uhero.github.io/fcutils/reference/plot_fc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive plot with level and growth rate for forecast series — plot_fc","text":"ser time series plot (min 1, max 3) (e.g. current fcst, old fcst, history) rng_start start zoom range (\"YYYY-MM-DD\") rng_end end zoom range (\"YYYY-MM-DD\") height height single panel (px) width width single panel (px) yoy_gr year--year (default) annualized growth","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_fc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive plot with level and growth rate for forecast series — plot_fc","text":"dygraph plot","code":""},{"path":"https://uhero.github.io/fcutils/reference/plot_fc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive plot with level and growth rate for forecast series — plot_fc","text":"","code":"`ncen@us.sola` <- ts(NA_real_, start = 2016, end = 2021, freq = 1) |> tsbox::ts_xts() `ncen@us.sola`[\"2016/2021\"] <- c(323127513, 325511184, 327891911, 330268840, 332639102, 334998398) `ncen@us.oldsola` <- `ncen@us.sola` `ncen@us.oldsola`[\"2020/2021\"] <- c(352639102, 374998398) `ncen@us.a` <- `ncen@us.sola` `ncen@us.a`[\"2020/2021\"] <- NA test1 <- tsbox::ts_tslist(tsbox::ts_c(`ncen@us.sola`, `ncen@us.oldsola`, `ncen@us.a`)) |>   purrr::map(AtoQ) |>   purrr::reduce(tsbox::ts_c) |>   magrittr::set_names(c(\"ncen@us.sola\", \"ncen@us.oldsola\", \"ncen@us.a\")) #> Joining with `by = join_by(time)` #> Joining with `by = join_by(time)` #> Joining with `by = join_by(time)` plot_fc(tsbox::ts_c(`ncen@us.sola`, `ncen@us.oldsola`, `ncen@us.a`), rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60},\"y\":[],\"y2\":{\"drawGrid\":false,\"independentTicks\":true}},\"title\":\"ncen@us.sola\",\"labels\":[\"year\",\"ncen@us.sola\",\"ncen@us.oldsola\",\"ncen@us.a\",\"ncen@us.sola%\"],\"retainDateWindow\":false,\"ylabel\":\"level\",\"y2label\":\"% Chg\",\"colors\":[\"#1D667F\",\"#F6A01B\",\"#9BBB59\",\"#1D667F\"],\"series\":{\"ncen@us.sola\":{\"axis\":\"y\",\"strokeWidth\":2},\"ncen@us.oldsola\":{\"axis\":\"y\",\"strokeWidth\":2,\"strokePattern\":[7,3]},\"ncen@us.a\":{\"axis\":\"y\",\"strokeWidth\":2,\"strokePattern\":[7,3]},\"ncen@us.sola%\":{\"axis\":\"y2\",\"stepPlot\":true,\"fillGraph\":true}},\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\",\"legend\":\"follow\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":true,\"hideOverlayOnMouseOut\":true},\"scale\":\"yearly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\"],[323127513,325511184,327891911,330268840,332639102,334998398],[323127513,325511184,327891911,330268840,352639102,374998398],[323127513,325511184,327891911,330268840,null,null],[null,0.7376874156797664,0.7313810145460398,0.7249123629646359,0.7176765449625755,0.7092659840093107]]},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}plot_fc(test1, rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60},\"y\":[],\"y2\":{\"drawGrid\":false,\"independentTicks\":true}},\"title\":\"ncen@us.sola\",\"labels\":[\"quarter\",\"ncen@us.sola\",\"ncen@us.oldsola\",\"ncen@us.a\",\"ncen@us.sola%\"],\"retainDateWindow\":false,\"ylabel\":\"level\",\"y2label\":\"% Chg\",\"colors\":[\"#1D667F\",\"#F6A01B\",\"#9BBB59\",\"#1D667F\"],\"series\":{\"ncen@us.sola\":{\"axis\":\"y\",\"strokeWidth\":2},\"ncen@us.oldsola\":{\"axis\":\"y\",\"strokeWidth\":2,\"strokePattern\":[7,3]},\"ncen@us.a\":{\"axis\":\"y\",\"strokeWidth\":2,\"strokePattern\":[7,3]},\"ncen@us.sola%\":{\"axis\":\"y2\",\"stepPlot\":true,\"fillGraph\":true}},\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\",\"legend\":\"follow\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":true,\"hideOverlayOnMouseOut\":true},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,329379991.75,329972557.25,330565122.75,331157688.25,331754366,332344190,332934014,333523838,334113662,334703486,335293310,335883134],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,321879991.75,327472557.25,333065122.75,338657688.25,344254366,349844190,355434014,361023838,366613662,372203486,377793310,383383134],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,329377491.625,329971723.875,330565956.125,331160188.375,null,null,null,null,null,null,null,null],[null,null,null,null,0.7400763703093727,0.7384822639493915,0.7368940319336215,0.7353116418509886,0.7338312204504316,0.732196255119244,0.7305672632399896,0.7289442121357403,0.7276529146919897,0.7258242231557022,0.724002153824288,0.7221866707914693,0.7208617127546058,0.7187363609159725,0.7166186288175114,0.7145084755555198,0.7111574833049916,0.7098953648023709,0.7086377182236481,0.7073845198435347]]},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}test1 <- AtoQ(`ncen@us.sola`) #> Joining with `by = join_by(time)` plot_fc(`ncen@us.sola`, rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60},\"y\":[],\"y2\":{\"drawGrid\":false,\"independentTicks\":true}},\"title\":\"value\",\"labels\":[\"year\",\"value\",\"value%\"],\"retainDateWindow\":false,\"ylabel\":\"level\",\"y2label\":\"% Chg\",\"colors\":[\"#1D667F\",\"#1D667F\"],\"series\":{\"value\":{\"axis\":\"y\",\"strokeWidth\":2},\"value%\":{\"axis\":\"y2\",\"stepPlot\":true,\"fillGraph\":true}},\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\",\"legend\":\"follow\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":true,\"hideOverlayOnMouseOut\":true},\"scale\":\"yearly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\"],[323127513,325511184,327891911,330268840,332639102,334998398],[null,0.7376874156797664,0.7313810145460398,0.7249123629646359,0.7176765449625755,0.7092659840093107]]},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}plot_fc(test1, rng_start = \"2017-01-01\")  {\"x\":{\"attrs\":{\"axes\":{\"x\":{\"pixelsPerLabel\":60},\"y\":[],\"y2\":{\"drawGrid\":false,\"independentTicks\":true}},\"title\":\"value\",\"labels\":[\"quarter\",\"value\",\"value%\"],\"retainDateWindow\":false,\"ylabel\":\"level\",\"y2label\":\"% Chg\",\"colors\":[\"#1D667F\",\"#1D667F\"],\"series\":{\"value\":{\"axis\":\"y\",\"strokeWidth\":2},\"value%\":{\"axis\":\"y2\",\"stepPlot\":true,\"fillGraph\":true}},\"showRangeSelector\":true,\"dateWindow\":[\"2017-01-01T00:00:00.000Z\",\"2023-07-16T00:00:00.000Z\"],\"rangeSelectorHeight\":30,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"red\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\",\"legend\":\"follow\",\"labelsDivWidth\":250,\"labelsShowZeroValues\":true,\"labelsSeparateLines\":true,\"hideOverlayOnMouseOut\":true},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\"],[322233636.375,322829554.125,323425471.875,324021389.625,324618411.375,325213593.125,325808774.875,326403956.625,327000562.625,327594794.875,328189027.125,328783259.375,329379991.75,329972557.25,330565122.75,331157688.25,331754366,332344190,332934014,333523838,334113662,334703486,335293310,335883134],[null,null,null,null,0.7400763703093727,0.7384822639493915,0.7368940319336215,0.7353116418509886,0.7338312204504316,0.732196255119244,0.7305672632399896,0.7289442121357403,0.7276529146919897,0.7258242231557022,0.724002153824288,0.7221866707914693,0.7208617127546058,0.7187363609159725,0.7166186288175114,0.7145084755555198,0.7111574833049916,0.7098953648023709,0.7086377182236481,0.7073845198435347]]},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}if (FALSE) { get_series_exp(74, save_loc = NULL, rename = \"no\") |>   tsbox::ts_long() |>   tsbox::ts_xts() |>   magrittr::extract(, c(\"E_NF@HI.Q\", \"ECT@HI.Q\", \"EMN@HI.Q\")) |>   plot_fc() }"},{"path":"https://uhero.github.io/fcutils/reference/pm.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate dates formatted as yyyyMm or yyyy.m to obtain period — pm","title":"Concatenate dates formatted as yyyyMm or yyyy.m to obtain period — pm","text":"Concatenate dates formatted yyyyMm yyyy.m obtain period","code":""},{"path":"https://uhero.github.io/fcutils/reference/pm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate dates formatted as yyyyMm or yyyy.m to obtain period — pm","text":"","code":"pm(dat1 = \"\", dat2 = \"\")"},{"path":"https://uhero.github.io/fcutils/reference/pm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate dates formatted as yyyyMm or yyyy.m to obtain period — pm","text":"dat1 date period start (string: yyyyMm yyyy.m) dat2 date period end (string: yyyyMm yyyy.m)","code":""},{"path":"https://uhero.github.io/fcutils/reference/pm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate dates formatted as yyyyMm or yyyy.m to obtain period — pm","text":"string containing date range","code":""},{"path":"https://uhero.github.io/fcutils/reference/pm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate dates formatted as yyyyMm or yyyy.m to obtain period — pm","text":"","code":"pm(\"2010M1\", \"2020M4\") #> [1] \"2010-01-01/2020-04-01\" pm(2010.1, 2020.4) #> [1] \"2010-01-01/2020-04-01\" pm(2010.1, ) #> [1] \"2010-01-01/\" pm(, 2010.1) #> [1] \"/2010-01-01\""},{"path":"https://uhero.github.io/fcutils/reference/pq.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate dates formatted as yyyyQq or yyyy.q to obtain period — pq","title":"Concatenate dates formatted as yyyyQq or yyyy.q to obtain period — pq","text":"Concatenate dates formatted yyyyQq yyyy.q obtain period","code":""},{"path":"https://uhero.github.io/fcutils/reference/pq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate dates formatted as yyyyQq or yyyy.q to obtain period — pq","text":"","code":"pq(dat1 = \"\", dat2 = \"\")"},{"path":"https://uhero.github.io/fcutils/reference/pq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate dates formatted as yyyyQq or yyyy.q to obtain period — pq","text":"dat1 date period start (string: yyyyQq yyyy.q) dat2 date period end (string: yyyyQq yyyy.q)","code":""},{"path":"https://uhero.github.io/fcutils/reference/pq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate dates formatted as yyyyQq or yyyy.q to obtain period — pq","text":"string containing date range","code":""},{"path":"https://uhero.github.io/fcutils/reference/pq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate dates formatted as yyyyQq or yyyy.q to obtain period — pq","text":"","code":"pq(\"2010Q1\", \"2020Q4\") #> [1] \"2010-01-01/2020-10-01\" pq(2010.1, 2020.4) #> [1] \"2010-01-01/2020-10-01\" pq(2010.1, ) #> [1] \"2010-01-01/\" pq(, 2010.1) #> [1] \"/2010-01-01\""},{"path":"https://uhero.github.io/fcutils/reference/pq_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate date formatted as yyyyQq or yyyy.q to obtain single period\nDON'T USE!!! USE lubridate::yq() INSTEAD — pq_1","title":"Concatenate date formatted as yyyyQq or yyyy.q to obtain single period\nDON'T USE!!! USE lubridate::yq() INSTEAD — pq_1","text":"Concatenate date formatted yyyyQq yyyy.q obtain single period USE!!! USE lubridate::yq() INSTEAD","code":""},{"path":"https://uhero.github.io/fcutils/reference/pq_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate date formatted as yyyyQq or yyyy.q to obtain single period\nDON'T USE!!! USE lubridate::yq() INSTEAD — pq_1","text":"","code":"pq_1(dat1 = \"\")"},{"path":"https://uhero.github.io/fcutils/reference/pq_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate date formatted as yyyyQq or yyyy.q to obtain single period\nDON'T USE!!! USE lubridate::yq() INSTEAD — pq_1","text":"dat1 date period start (string: yyyyQq yyyy.q)","code":""},{"path":"https://uhero.github.io/fcutils/reference/pq_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate date formatted as yyyyQq or yyyy.q to obtain single period\nDON'T USE!!! USE lubridate::yq() INSTEAD — pq_1","text":"string containing date range","code":""},{"path":"https://uhero.github.io/fcutils/reference/pq_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate date formatted as yyyyQq or yyyy.q to obtain single period\nDON'T USE!!! USE lubridate::yq() INSTEAD — pq_1","text":"","code":"pq_1(\"2010Q1\") #> [1] \"2010-01-01\" pq_1(2010.1) #> [1] \"2010-01-01\""},{"path":"https://uhero.github.io/fcutils/reference/ptd_cum.html","id":null,"dir":"Reference","previous_headings":"","what":"Period to date sum or average — ptd_cum","title":"Period to date sum or average — ptd_cum","text":"Period date sum average","code":""},{"path":"https://uhero.github.io/fcutils/reference/ptd_cum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Period to date sum or average — ptd_cum","text":"","code":"ptd_cum(long_tbl_in, per = \"year\", avg = TRUE)"},{"path":"https://uhero.github.io/fcutils/reference/ptd_cum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Period to date sum or average — ptd_cum","text":"long_tbl_in long tibble time series (produced ts_long() example) per unit time supplied floor_date() (ytd per = \"year\" (default), mtd per = \"month\") avg true (default), year date average, false, year date sum","code":""},{"path":"https://uhero.github.io/fcutils/reference/ptd_cum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Period to date sum or average — ptd_cum","text":"long tibble time series containing year date sum average","code":""},{"path":"https://uhero.github.io/fcutils/reference/ptd_cum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Period to date sum or average — ptd_cum","text":"","code":"if (FALSE) { get_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\")) |>   tsbox::ts_long() |>   ptd_cum() }"},{"path":"https://uhero.github.io/fcutils/reference/ptd_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Period to date growth rate — ptd_gr","title":"Period to date growth rate — ptd_gr","text":"Period date growth rate","code":""},{"path":"https://uhero.github.io/fcutils/reference/ptd_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Period to date growth rate — ptd_gr","text":"","code":"ptd_gr(long_tbl_in, per = \"year\", lag_length = \"1 year\", avg = TRUE)"},{"path":"https://uhero.github.io/fcutils/reference/ptd_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Period to date growth rate — ptd_gr","text":"long_tbl_in long tibble time series (produced ts_long() example) per unit time supplied floor_date() (ytd per = \"year\" (default), mtd per = \"month\") lag_length period growth calculated (e.g. \"1 year\" (default), \"3 years\", etc. See ?ts_lag() options) avg true, year date average, false, year date sum calculation","code":""},{"path":"https://uhero.github.io/fcutils/reference/ptd_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Period to date growth rate — ptd_gr","text":"long tibble time series containing year date growth rate","code":""},{"path":"https://uhero.github.io/fcutils/reference/ptd_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Period to date growth rate — ptd_gr","text":"","code":"if (FALSE) { get_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\")) |>   tsbox::ts_long() |>   ptd_gr() |>   tail() get_series(\"VAPNS@HI.D\") |>   tsbox::ts_long() |>   ptd_gr(per = \"month\", lag_length = \"3 years\") |>   tail() }"},{"path":"https://uhero.github.io/fcutils/reference/py.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate dates formatted as yyyy to obtain period — py","title":"Concatenate dates formatted as yyyy to obtain period — py","text":"Concatenate dates formatted yyyy obtain period","code":""},{"path":"https://uhero.github.io/fcutils/reference/py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate dates formatted as yyyy to obtain period — py","text":"","code":"py(dat1 = \"\", dat2 = \"\")"},{"path":"https://uhero.github.io/fcutils/reference/py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate dates formatted as yyyy to obtain period — py","text":"dat1 year period start (string numeric: yyyy) dat2 year period end (string numeric: yyyy)","code":""},{"path":"https://uhero.github.io/fcutils/reference/py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate dates formatted as yyyy to obtain period — py","text":"string containing date range","code":""},{"path":"https://uhero.github.io/fcutils/reference/py.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate dates formatted as yyyy to obtain period — py","text":"","code":"py(\"2010\", \"2020\") #> [1] \"2010-01-01/2020-01-01\" py(2010, 2020) #> [1] \"2010-01-01/2020-01-01\" py(2010, ) #> [1] \"2010-01-01/\" py(, 2010) #> [1] \"/2010-01-01\""},{"path":"https://uhero.github.io/fcutils/reference/qtrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert period in quarters to period in months — qtrs","title":"Convert period in quarters to period in months — qtrs","text":"Convert period quarters period months","code":""},{"path":"https://uhero.github.io/fcutils/reference/qtrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert period in quarters to period in months — qtrs","text":"","code":"qtrs(nr_quarters)"},{"path":"https://uhero.github.io/fcutils/reference/qtrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert period in quarters to period in months — qtrs","text":"nr_quarters number quarters period (integer)","code":""},{"path":"https://uhero.github.io/fcutils/reference/qtrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert period in quarters to period in months — qtrs","text":"number months period","code":""},{"path":"https://uhero.github.io/fcutils/reference/qtrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert period in quarters to period in months — qtrs","text":"","code":"qtrs(3) #> [1] \"9m 0d 0H 0M 0S\" lubridate::ymd(\"2020-01-01\") + qtrs(3) #> [1] \"2020-10-01\""},{"path":"https://uhero.github.io/fcutils/reference/rename_udaman.html","id":null,"dir":"Reference","previous_headings":"","what":"Format series names to udaman format (mnemonic@loc.freq) — rename_udaman","title":"Format series names to udaman format (mnemonic@loc.freq) — rename_udaman","text":"Format series names udaman format (mnemonic@loc.freq)","code":""},{"path":"https://uhero.github.io/fcutils/reference/rename_udaman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format series names to udaman format (mnemonic@loc.freq) — rename_udaman","text":"","code":"rename_udaman(ser_in, freq = NULL)"},{"path":"https://uhero.github.io/fcutils/reference/rename_udaman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format series names to udaman format (mnemonic@loc.freq) — rename_udaman","text":"ser_in series name (string \"mnemonic_loc\", \"mnemonic__loc_freq\") freq frequency series, required contained series name (string \"D\", \"W\", \"M\", \"Q\", \"S\", \"\")","code":""},{"path":"https://uhero.github.io/fcutils/reference/rename_udaman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format series names to udaman format (mnemonic@loc.freq) — rename_udaman","text":"series name following udaman convention \"mnemonic@loc.freq\"","code":""},{"path":"https://uhero.github.io/fcutils/reference/rename_udaman.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format series names to udaman format (mnemonic@loc.freq) — rename_udaman","text":"","code":"rename_udaman(c(\"E_NF_HI\", \"ECT_HI\", \"E_TU_HAW\"), freq = \"M\") #> [1] \"E_NF@HI.M\"  \"ECT@HI.M\"   \"E_TU@HAW.M\" rename_udaman(c(\"E_NF__HI_M\", \"ECT__HI_M\", \"VAP__HAW_W\")) #> [1] \"E_NF@HI.M\" \"ECT@HI.M\"  \"VAP@HAW.W\" rename_udaman(c(\"E_NF@HI.M\", \"ECT@HI.M\", \"VAP@HAW.W\")) #> [1] \"E_NF@HI.M\" \"ECT@HI.M\"  \"VAP@HAW.W\" rename_udaman(c(\"SH_US@HI.M\", \"SH_JP__HON_M\")) #> [1] \"SH_US@HI.M\" \"SH_JP@JP.M\" if (FALSE) { get_series_exp(74) |> dplyr::rename_with(~ rename_udaman(., freq = \"M\"), .cols = -1) get_series_exp(74) |> dplyr::rename_with(rename_udaman, freq = \"M\", .cols = !time) get_series_exp(74) |>   tsbox::ts_long() |>   dplyr::mutate(id = rename_udaman(id, freq = \"M\")) get_series_exp(318, rename = \"full\") |>   tsbox::ts_long() |>   dplyr::mutate(id = rename_udaman(id)) |>   tsbox::ts_xts() }"},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"colors defined in the UHERO Style Guide — uhero_colors","title":"colors defined in the UHERO Style Guide — uhero_colors","text":"colors defined UHERO Style Guide","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colors defined in the UHERO Style Guide — uhero_colors","text":"","code":"uhero_colors"},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"colors defined in the UHERO Style Guide — uhero_colors","text":"vector hex color codes","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"colors defined in the UHERO Style Guide — uhero_colors","text":"author","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"colors defined in the UHERO Style Guide — uhero_colors","text":"uhero.hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"colors defined in the UHERO Style Guide — uhero_colors","text":"Peter Fuleky fuleky@hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_50.html","id":null,"dir":"Reference","previous_headings":"","what":"transparent versions of UHERO colors — uhero_colors_50","title":"transparent versions of UHERO colors — uhero_colors_50","text":"transparent versions UHERO colors","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_50.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"transparent versions of UHERO colors — uhero_colors_50","text":"","code":"uhero_colors_50"},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_50.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"transparent versions of UHERO colors — uhero_colors_50","text":"vector hex color codes","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_50.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"transparent versions of UHERO colors — uhero_colors_50","text":"author","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_50.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"transparent versions of UHERO colors — uhero_colors_50","text":"uhero.hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_50.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"transparent versions of UHERO colors — uhero_colors_50","text":"Peter Fuleky fuleky@hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_light.html","id":null,"dir":"Reference","previous_headings":"","what":"lighter versions of UHERO colors — uhero_colors_light","title":"lighter versions of UHERO colors — uhero_colors_light","text":"lighter versions UHERO colors","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lighter versions of UHERO colors — uhero_colors_light","text":"","code":"uhero_colors_light"},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_light.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"lighter versions of UHERO colors — uhero_colors_light","text":"vector hex color codes","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_light.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"lighter versions of UHERO colors — uhero_colors_light","text":"author","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_light.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"lighter versions of UHERO colors — uhero_colors_light","text":"uhero.hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/uhero_colors_light.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lighter versions of UHERO colors — uhero_colors_light","text":"Peter Fuleky fuleky@hawaii.edu","code":""},{"path":"https://uhero.github.io/fcutils/reference/update_eqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a bimets model with new/modified equations — update_eqs","title":"Update a bimets model with new/modified equations — update_eqs","text":"Update bimets model new/modified equations","code":""},{"path":"https://uhero.github.io/fcutils/reference/update_eqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a bimets model with new/modified equations — update_eqs","text":"","code":"update_eqs(model_1, model_2, eqList)"},{"path":"https://uhero.github.io/fcutils/reference/update_eqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a bimets model with new/modified equations — update_eqs","text":"model_1 original estimated bimets model model_2 bimets model containing updates (updated equations need estimated) eqList names updated behavioral equations (vector strings), others taken model_1 (equations missing model_2 removed)","code":""},{"path":"https://uhero.github.io/fcutils/reference/update_eqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a bimets model with new/modified equations — update_eqs","text":"estimated bimets model containing updates","code":""},{"path":"https://uhero.github.io/fcutils/reference/update_eqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a bimets model with new/modified equations — update_eqs","text":"","code":"if (FALSE) { update_eqs(scen_model_1_est, scen_model_2_est, c(\"E_NF_AT_HI_Q\", \"Y_R_AT_HI_Q\")) }"},{"path":"https://uhero.github.io/fcutils/reference/write_tsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Save an xts or a wide data frame with time series in tsd format — write_tsd","title":"Save an xts or a wide data frame with time series in tsd format — write_tsd","text":"Save xts wide data frame time series tsd format","code":""},{"path":"https://uhero.github.io/fcutils/reference/write_tsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save an xts or a wide data frame with time series in tsd format — write_tsd","text":"","code":"write_tsd(x, file)"},{"path":"https://uhero.github.io/fcutils/reference/write_tsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save an xts or a wide data frame with time series in tsd format — write_tsd","text":"x xts (wide) data frame time series (M, Q, frequency) file string denoting location name output file","code":""},{"path":"https://uhero.github.io/fcutils/reference/write_tsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save an xts or a wide data frame with time series in tsd format — write_tsd","text":"nothing (silently save contents tsd file user defined location)","code":""},{"path":"https://uhero.github.io/fcutils/reference/write_tsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save an xts or a wide data frame with time series in tsd format — write_tsd","text":"","code":"if (FALSE) { get_series_exp(74) |> write_tsd(\"out.tsd\") }"},{"path":"https://uhero.github.io/fcutils/reference/ymd_to_yQq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dates from yyyy-mm-dd to yyyyQqq format — ymd_to_yQq","title":"Convert dates from yyyy-mm-dd to yyyyQqq format — ymd_to_yQq","text":"Convert dates yyyy-mm-dd yyyyQqq format","code":""},{"path":"https://uhero.github.io/fcutils/reference/ymd_to_yQq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dates from yyyy-mm-dd to yyyyQqq format — ymd_to_yQq","text":"","code":"ymd_to_yQq(x)"},{"path":"https://uhero.github.io/fcutils/reference/ymd_to_yQq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dates from yyyy-mm-dd to yyyyQqq format — ymd_to_yQq","text":"x dates (string: yyyy-mm-dd)","code":""},{"path":"https://uhero.github.io/fcutils/reference/ymd_to_yQq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dates from yyyy-mm-dd to yyyyQqq format — ymd_to_yQq","text":"formatted dates (string: yyyyQqq)","code":""},{"path":"https://uhero.github.io/fcutils/reference/ymd_to_yQq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert dates from yyyy-mm-dd to yyyyQqq format — ymd_to_yQq","text":"","code":"ymd_to_yQq(c(\"2010-01-01\", \"2020-10-01\")) #> [1] \"2010Q1\" \"2020Q4\" ymd_to_yQq(c(\"2010-01-01\", \"2020-10-01\")) |> lubridate::yq() #> [1] \"2010-01-01\" \"2020-10-01\""},{"path":"https://uhero.github.io/fcutils/reference/ytd_cum.html","id":null,"dir":"Reference","previous_headings":"","what":"Year to date sum or average — ytd_cum","title":"Year to date sum or average — ytd_cum","text":"Year date sum average","code":""},{"path":"https://uhero.github.io/fcutils/reference/ytd_cum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year to date sum or average — ytd_cum","text":"","code":"ytd_cum(long_tbl_in, avg = TRUE)"},{"path":"https://uhero.github.io/fcutils/reference/ytd_cum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year to date sum or average — ytd_cum","text":"long_tbl_in long tibble time series (produced ts_long() example) avg true, year date average, false, year date sum","code":""},{"path":"https://uhero.github.io/fcutils/reference/ytd_cum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year to date sum or average — ytd_cum","text":"long tibble time series containing year date sum average","code":""},{"path":"https://uhero.github.io/fcutils/reference/ytd_cum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year to date sum or average — ytd_cum","text":"","code":"if (FALSE) { get_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\")) |>   tsbox::ts_long() |>   ytd_cum() }"},{"path":"https://uhero.github.io/fcutils/reference/ytd_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Year to date growth rate — ytd_gr","title":"Year to date growth rate — ytd_gr","text":"Year date growth rate","code":""},{"path":"https://uhero.github.io/fcutils/reference/ytd_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year to date growth rate — ytd_gr","text":"","code":"ytd_gr(long_tbl_in, avg = TRUE)"},{"path":"https://uhero.github.io/fcutils/reference/ytd_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year to date growth rate — ytd_gr","text":"long_tbl_in long tibble time series (produced ts_long() example) avg true, year date average, false, year date sum calculation","code":""},{"path":"https://uhero.github.io/fcutils/reference/ytd_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year to date growth rate — ytd_gr","text":"long tibble time series containing year date growth rate","code":""},{"path":"https://uhero.github.io/fcutils/reference/ytd_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year to date growth rate — ytd_gr","text":"","code":"if (FALSE) { get_series(c(\"VISNS@HI.M\", \"VAPNS@HI.M\")) |>   tsbox::ts_long() |>   ytd_gr() |>   tail() }"}]
